<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>人未尽,杯莫停 on 人未尽,杯莫停</title>
    <link>https://sunwenli.github.io/zh/</link>
    <description>Recent content in 人未尽,杯莫停 on 人未尽,杯莫停</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2019 孙文礼</copyright>
    <lastBuildDate>Tue, 26 Sep 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/zh/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>今早诸事不顺</title>
      <link>https://sunwenli.github.io/zh/post/2021-0415/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2021-0415/</guid>
      <description>

&lt;h5 id=&#34;今早诸事不顺&#34;&gt;今早诸事不顺&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;早上平时常进的地铁口不让进，走别的口&lt;/p&gt;

&lt;p&gt;陪媳妇看医生，玛德那个沙雕医生跟前两个沙雕看病的唠了一个多钟头&lt;/p&gt;

&lt;p&gt;打车回公司路上司机差点调错头&lt;/p&gt;

&lt;p&gt;进大厦电梯还坏一个&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;总结&#34;&gt;总结&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;今日宜：少说话，多写 bug， 就完事了&lt;/p&gt;

&lt;hr /&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Mac app 内集成并调用 zipalign 报错 dyld: Library not loaded: @rpath/libc&#43;&#43;.dylib</title>
      <link>https://sunwenli.github.io/zh/post/2019-0925/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2019-0925/</guid>
      <description>&lt;p&gt;打包工具(mac 版)增加了 electron 内置的自动更新功能，前提是必须对 app 签名才行。今天交给安卓组同学试用时出问题了😂。&lt;/p&gt;

&lt;p&gt;使用打包工具内集成的 zipalign(一个对安卓 apk 优化的工具)对 apk 优化时报错了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error:

dyld: Library not loaded: @rpath/libc++.dylib
  Referenced from: myAppName.app/Contents/Resources/tool/mac/zipalign
  Reason: image not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很显然，这是 zipalign 引用动态库 libc++.dylib 且没有找到该库导致的。
找不到的原因在于 &lt;code&gt;@rpath&lt;/code&gt;,对 &lt;code&gt;@rpath&lt;/code&gt; 的解释可以参考&lt;a href=&#34;http://www.tanhao.me/pieces/1361.html/&#34; target=&#34;_blank&#34;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;说白了 &lt;code&gt;@rpath&lt;/code&gt; 是一个类似 shell 中的变量, zipalign 在运行时会从 &lt;code&gt;@rpath&lt;/code&gt; 取出相应的值然后拼接到 &lt;code&gt;/libc++.dylib&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;事实上，&lt;code&gt;@rpath&lt;/code&gt; 在这里对应的值是 &lt;code&gt;/usr/lib&lt;/code&gt;，那为什么 zipalign 找不到这个库，原因在&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW19&#34; target=&#34;_blank&#34;&gt;这篇文章&lt;/a&gt;可以找到。&lt;/p&gt;

&lt;p&gt;简单来说，是苹果为了防止第三方恶意修改 app 加了一道防御墙，不允许 app 内部加载动态库或脚本。这些都限于签名的正式 app,未签名的 app 不受限制。&lt;/p&gt;

&lt;p&gt;找到了问题的原因，接下来就是如何解决了。&lt;/p&gt;

&lt;p&gt;我们继续&lt;/p&gt;

&lt;p&gt;&lt;code&gt;install_name_tool&lt;/code&gt; 这个工具是专门操作 app内的动态库配置的。&lt;/p&gt;

&lt;p&gt;在终端执行以下命令&lt;/p&gt;

&lt;p&gt;&lt;code&gt;install_name_tool -change @rpath/libc++.dylib /usr/lib/libc++.dylib myAppName.app/Contents/Resources/tool/mac/zipalign&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样就把 zipalign 内找动态库的链接改好了。&lt;/p&gt;

&lt;p&gt;附上 &lt;code&gt;install_name_tool&lt;/code&gt; 的简单使用说明 ：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查看 &lt;code&gt;install_name_tool&lt;/code&gt; 支持哪些参数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;install_name_tool -h
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Usage: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/install_name_tool
 [-change old new] ... [-rpath old new] ... [-add_rpath new] ... [-delete_rpath old] ... [-id name] input
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;修改动态库路径&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;install_name_tool -change &amp;lt;app内的@rpath值&amp;gt; &amp;lt;真实的路径值&amp;gt; &amp;lt;app路径&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其余的命令暂时没用到，咱也不知道啥作用^^。&lt;/p&gt;

&lt;p&gt;参考链接&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/bfa05ef3c482&#34; target=&#34;_blank&#34;&gt;MAC：@rpath的坑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tanhao.me/pieces/1361.html/&#34; target=&#34;_blank&#34;&gt;Xcode Build Settings中的变量@rpath,@loader_path,@executable_path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/minger1202/article/details/71319308&#34; target=&#34;_blank&#34;&gt;install_name_tool解决dyld: Library not loaded&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>重生</title>
      <link>https://sunwenli.github.io/zh/post/2019-0907/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2019-0907/</guid>
      <description>&lt;p&gt;公司被上市公司收购了，然而上市公司出了些问题，所以公司领导决定从上市公司那里脱离出来。&lt;/p&gt;

&lt;p&gt;领导新创建了个新公司，决定下周开始，我们部门和运维部门先和当前公司签离职，然后在和新公司签入职。&lt;/p&gt;

&lt;p&gt;不明觉厉。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>写给呦呦鹿鸣的一封信</title>
      <link>https://sunwenli.github.io/zh/post/2019-0708/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2019-0708/</guid>
      <description>&lt;p&gt;本来想发原文内容呢，后来想了下，情感表达过于真实感人，不便于公之于众。还是不发了吧。&lt;/p&gt;

&lt;p&gt;假装这里是原文&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;鹿鸣君你好：

	...

	...

	日拱一卒，只为苍生说人话。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与君共勉。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>beego 单元测试的 bug</title>
      <link>https://sunwenli.github.io/zh/post/2019-0627/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2019-0627/</guid>
      <description>&lt;p&gt;当我在用 beego 写单元测时,源代码里用到了 &lt;code&gt;beego.AppConfig.GetSection()&lt;/code&gt; 然后在测试方法调用的时候就报错了 .&lt;/p&gt;

&lt;p&gt;测试方法不能正确的读取配置文件的内容。部分代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cfgs, err := beego.AppConfig.GetSection(&amp;quot;test_conf&amp;quot;)
if err != nil {
	panic(err)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;报错输出：
&amp;gt; panic outputs: &lt;code&gt;not implement in the fakeConfigContainer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;beego 的作者在 2014 年的时候回复说这是个 &lt;code&gt;bug&lt;/code&gt;,已经在新版本里修复,但是我现在还是遇到了这个问题，我的 beego 版本是 &lt;code&gt;1.11.1&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;我在作者的 github &lt;a href=&#34;https://github.com/astaxie/beego/issues&#34; target=&#34;_blank&#34;&gt;源码仓库&lt;/a&gt; 搜索解决方法时发现很多人也遇到了同样的问题，解决方法也各不相同。&lt;/p&gt;

&lt;p&gt;最终我还是找到了一个不是最好的解决方法。&lt;/p&gt;

&lt;p&gt;假设工程的目录结构是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- conf
└─ app.conf
|-- controllers
└─ tc.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;tc.go&lt;/code&gt; 的 &lt;code&gt;init&lt;/code&gt; 方法里我们之前调用 &lt;code&gt;beego.AppConfig.GetSection()&lt;/code&gt; ,由于不能正确的读取配置，所以会报错。&lt;/p&gt;

&lt;p&gt;解决方法就是在调用之前加载下配置,如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;err := beego.LoadAppConfig(&amp;quot;ini&amp;quot;, &amp;quot;../conf/app.conf&amp;quot;)
if err != nil {
	panic(err)
}

cfgs, err := beego.AppConfig.GetSection(&amp;quot;test_conf&amp;quot;)
if err != nil {
	panic(err)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/astaxie/beego/issues/2773&#34; target=&#34;_blank&#34;&gt;refer Issues of&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>傻逼</title>
      <link>https://sunwenli.github.io/zh/post/2019-0609/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2019-0609/</guid>
      <description>&lt;p&gt;傻逼本傻！&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>如何使 QWebengineView 调用 React 的方法</title>
      <link>https://sunwenli.github.io/zh/post/2019-0515/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2019-0515/</guid>
      <description>&lt;p&gt;直接使用 golang 版 Qt 中的 QWebengineView  的 &lt;code&gt;RunJavaScript4&lt;/code&gt; 方法不能直接调用到 React 方法 &lt;/p&gt;

&lt;p&gt;按照以下步骤可以解决问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在 js 文件里, 需要把 React 的类实例暴露给 window ，代码如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;  import xxx;
  //...
  window.updateValue = function(url) {
  	alert(&amp;quot;call ok !&amp;quot;);
    // if(window.callback != undefined) {
    //    window.callback.updateValue(url);
    // }
  };
  window.setCallback = function(callback) {
    window.callback = callback;
  }
  //...
  export default class MyFeedback extends React.Component {
   //...
   // key step
   //  in react life cycle `componentWillMount` set `this` :
   componentWillMount() {
         window.setCallback(this);
   }
  //...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;在 go 文件里, 我们可以这样调用方法 :&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;	ap.WebView.Page().RunJavaScript4(&amp;quot;window.updateValue(&#39;hello&#39;)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译运行项目 ，就可以看到输出 &lt;code&gt;call ok!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参考链接 : &lt;a href=&#34;https://blog.csdn.net/ZHOUYONGXYZ/article/details/82760929&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/ZHOUYONGXYZ/article/details/82760929&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>Qt使用QWebengineView导致花屏和黑屏现象</title>
      <link>https://sunwenli.github.io/zh/post/2019-0424/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2019-0424/</guid>
      <description>&lt;p&gt;Qt使用QWebengineView导致花屏和黑屏现象&lt;/p&gt;

&lt;p&gt;最近在搞 Ant Design 的二次开发，需要迁移一个界面到 Qt(golang) 开发的 Mac 版的桌面程序里。桌面程序加载了一个 QWebengine 创建的 webview, webview 然后去 load 一个 url , 到这里一切还正常。&lt;/p&gt;

&lt;p&gt;每次点击界面里的按钮去和后端进行交互成功后，界面带着后端返回的数据进行重新渲染都会出现组件背景色变黑 （花屏和黑屏现象）。&lt;/p&gt;

&lt;p&gt;原因是有些旧机器支持的 OpenGL 驱动版本太低，所以需要使用 SoftwareOpenGL 。&lt;/p&gt;

&lt;p&gt;伪代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;qApplication := widgets.NewQApplication(len(os.Args), os.Args)
qApplication.SetAttribute(core.Qt__AA_UseSoftwareOpenGL, true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加以上代码可以解决问题。&lt;/p&gt;

&lt;p&gt;原文 &lt;a href=&#34;https://blog.csdn.net/Chaosty414/article/details/77885490&#34; target=&#34;_blank&#34;&gt;参考链接&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>iOS马甲包如何避免苹果审核4.3打回</title>
      <link>https://sunwenli.github.io/zh/post/2018_0510/</link>
      <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2018_0510/</guid>
      <description>&lt;p&gt;iOS马甲包如何避免苹果审核4.3打回&lt;/p&gt;

&lt;h3 id=&#34;ios马甲包如何避免苹果审核4-3打回&#34;&gt;iOS马甲包如何避免苹果审核4.3打回&lt;/h3&gt;

&lt;h4 id=&#34;什么是4-3-为什么打回&#34;&gt;什么是4.3，为什么打回&lt;/h4&gt;

&lt;p&gt;开发者提交审核的APP被苹果审核为重复应用（苹果开发指南4.3条款），不允许上架，严重者会被封开发者账号。&lt;/p&gt;

&lt;h4 id=&#34;苹果审核机制&#34;&gt;苹果审核机制&lt;/h4&gt;

&lt;p&gt;iOS包提交给苹果审核后，苹果那边会有 &lt;strong&gt;机审&lt;/strong&gt; 和 &lt;strong&gt;人工审核&lt;/strong&gt; 两种方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;机审

&lt;ul&gt;
&lt;li&gt;主要审核下包体力的二进制文件，这个过程中如果发现包体二进制相似度过高，回直接被4.3打回，不会进入人工审核流程。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人工审核

&lt;ul&gt;
&lt;li&gt;走到这个流程是通过了机审，此时审核人员会用提审时开发者提供的游戏账号登录进游戏进行试玩，如果审核人员发现登录界面，游戏场景，美术UI相似度过高，仍然有可能会被4.3打回。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;如何避免4-3&#34;&gt;如何避免4.3&lt;/h4&gt;

&lt;p&gt;方法有三，同时使用效果更佳：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;##### 使用不同的电脑+IP，出证书，打包&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;通过和苹果内部人员沟通了解到公司的IP已经被苹果列入重点审核名单，使用公司网络出的证书+打包都很容易被苹果审核为重复应用4.3打回。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;应对策略就是使用 4G网络出证书，打包设备也连接4G网络。&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;##### 垃圾代码&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;关于垃圾代码有一个量的把握，一个包应该加多少垃圾代码，之前调研的数量是总代码量的30%。对于客户端APP类游戏我们提供的是200个类，微端类APP游戏我们提供40个类。通过最近提审的情况看，这个量还不够，需要各扩大一倍，客户端类游戏提供400个类，微端类提供80个类。（ps. 某合作方提供的类401个）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;##### 游戏资源（场景+美术）&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;对于游戏资源和垃圾代码类似，某合作方的做法是加入了 600 张图片作为垃圾图片资源（其实就是后缀为png的文件，打不开的）。每次都把图片的hash值改掉，这样就可以达到每次都是不重复的图片资源的效果。修改hash可以借鉴他们提供的一个工具，Windows版的。&lt;/p&gt;

&lt;p&gt;游戏界面和场景尽量修改（可能不用易）&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>赋能、突破</title>
      <link>https://sunwenli.github.io/zh/post/2018_fighting/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/2018_fighting/</guid>
      <description>&lt;p&gt;2018年的小目标 —— 赋能、突破。😄.&lt;/p&gt;

&lt;h4 id=&#34;2018-赋能-突破&#34;&gt;2018 赋能、突破&lt;/h4&gt;

&lt;p&gt;只有努力才能使自己不被淘汰！&lt;/p&gt;

&lt;p&gt;共勉。&lt;/p&gt;

&lt;p&gt;加油，2018！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Php_best_practice_three</title>
      <link>https://sunwenli.github.io/zh/post/php_best_practice_three/</link>
      <pubDate>Tue, 12 Dec 2017 16:22:18 +0800</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/php_best_practice_three/</guid>
      <description>&lt;p&gt;This article is mainly talk about Email Class of CoderIgniter ,these days study CI during happiness and peniful. 😄.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS PHP best practice (two)</title>
      <link>https://sunwenli.github.io/zh/post/php_best_practice_two/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/php_best_practice_two/</guid>
      <description>&lt;p&gt;This article is mine recent days work summary. 😄.&lt;/p&gt;

&lt;p&gt;距离上一次写博客有2个月了，与其说博客，倒可以把这看作一周的工作的总结 😂。闲言少叙，开工。&lt;/p&gt;

&lt;h5 id=&#34;前期准备&#34;&gt;前期准备&lt;/h5&gt;

&lt;p&gt;​   首先，在过去一个周，先是着手制定了一份 **2017~2018年度目标计划 **，最近想学的技术及为自己未来找个定位然后列出一个季度的任务(12月~2月) 。&lt;/p&gt;

&lt;h5 id=&#34;着手实现&#34;&gt;着手实现&lt;/h5&gt;

&lt;p&gt;这周主要是在了解 &lt;code&gt;PHP&lt;/code&gt; 的一个常用的框架 &lt;a href=&#34;https://codeigniter.com/&#34; target=&#34;_blank&#34;&gt;CodeIgniter&lt;/a&gt; , 单位的项目也是基于它开发的，所以学习起来可以参考这单位的项目，这样对比这学习感觉更有效果。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从官网下载 &lt;code&gt;CI&lt;/code&gt; 源码然后开启本地的 &lt;code&gt;web&lt;/code&gt; 服务器 Apache。这期间又了解了下 &lt;code&gt;Apache&lt;/code&gt; 的配置及使用。&lt;/li&gt;
&lt;li&gt;学习资源和开发环境搭建都OK之后，进行 &lt;code&gt;CI&lt;/code&gt; 的学习。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目标计划内也包括了书籍的阅读，所以 &lt;a href=&#34;https://baike.baidu.com/item/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/2792808?fr=aladdin&#34; target=&#34;_blank&#34;&gt;《刻意练习》&lt;/a&gt;这本书在每天上下班的路上也在阅读中（ps.  &lt;a href=&#34;https://weread.qq.com/&#34; target=&#34;_blank&#34;&gt;微信读书App&lt;/a&gt; 用着不错）。&lt;/p&gt;

&lt;h5 id=&#34;实现进度&#34;&gt;实现进度&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CI&lt;/code&gt; 模型部分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/2792808?fr=aladdin&#34; target=&#34;_blank&#34;&gt;《刻意练习》&lt;/a&gt;阅读完成（300/1053）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一次写东西，写的乱七八糟的。😂😂😂&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS PHP best practice (one)</title>
      <link>https://sunwenli.github.io/zh/post/php_best_practice_one/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/post/php_best_practice_one/</guid>
      <description>&lt;p&gt;This article show us how to use mac own local web sever apache to build our own static website. ​😄​.&lt;/p&gt;

&lt;h4 id=&#34;macos-php-best-practice-one&#34;&gt;macOS PHP best practice (one)&lt;/h4&gt;

&lt;p&gt;最简单直接的方式还是使用 Mac 上自带的 Apache 和 PHP。&lt;/p&gt;

&lt;h5 id=&#34;启动-apache&#34;&gt;启动 Apache&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;启动:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   apache $sudo apachectl start
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动后，在浏览器中输入&lt;code&gt;localhost&lt;/code&gt; ，可以看到页面上显示&lt;code&gt;It works！&lt;/code&gt;。(&lt;code&gt;/Library/WebServer/Documents/&lt;/code&gt;下的&lt;code&gt;index.html.en&lt;/code&gt;文件)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Apache&lt;/code&gt; 的默认根目录是 &lt;code&gt;/Library/WebServer/Documents/&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;添加apache对php的支持&#34;&gt;添加apache对php的支持&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;打开 &lt;code&gt;http.conf&lt;/code&gt; 配置文件:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    sudo vim /etc/apache2/httpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;找到以下代码 &lt;code&gt;LoadModule php5_module libexec/apache2/ libphp5.so&lt;/code&gt; 并去掉注释（去掉前面的==#==号）, &lt;code&gt;wq&lt;/code&gt; 保存退出。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;重启-apache-进行php类型文件的调试&#34;&gt;重启 Apache,进行php类型文件的调试&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;重启:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   sudo apachectl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 &lt;code&gt;Apache&lt;/code&gt; 的根目录 &lt;code&gt;/Library/WebServer/Documents/&lt;/code&gt; 下新建&lt;code&gt;project&lt;/code&gt;文件夹并写一个&lt;code&gt;php&lt;/code&gt;文件输出&lt;code&gt;hello world&lt;/code&gt;。此时，在浏览器打开 &lt;a href=&#34;http://localhost/project/test.php&#34; target=&#34;_blank&#34;&gt;http://localhost/project/test.php&lt;/a&gt; 就可以正常看到&lt;code&gt;hello world&lt;/code&gt;了~&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果有权限问题,使用下列命令：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   sudo chown yourname:staff project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;yourname&lt;/code&gt; 是你自己的名字。&lt;/p&gt;

&lt;h5 id=&#34;使用homebrew安装mysql&#34;&gt;使用homebrew安装mysql&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;安装homebrew&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;安装mysql&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;启动mysql&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;mysql.server start
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;apache-常用命令&#34;&gt;Apache 常用命令&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;启动 Apache 服务&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sudo apachectl start
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;重新启动 Apache 服务&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sudo apachectl restart
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;关闭 Apache 服务&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sudo apachectl stop
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;查看 Apache 版本&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;httpd -v
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>https://sunwenli.github.io/zh/project/deep-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/project/deep-learning/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://sunwenli.github.io/zh/project/example-external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sunwenli.github.io/zh/project/example-external-project/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
